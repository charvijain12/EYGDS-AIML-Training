import yaml
import logging

# Configure logging
logging.basicConfig(filename='task_yaml.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

try:
    with open('settings.yaml', 'r') as f:
        config = yaml.safe_load(f)
    logging.info("Config loaded successfully")

    db = config['database']
    print(f"Connecting to {db['host']}:{db['port']} as {db['user']}")

except FileNotFoundError:
    logging.error("settings.yaml not found")
    print("Error: settings.yaml not found")

except yaml.YAMLError as e:
    logging.error(f"YAML parsing error: {e}")


csv
import csv
import logging

# Configure logging
logging.basicConfig(filename='task_csv.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

try:
    with open('sales_data.csv', 'r') as f:
        reader = csv.DictReader(f)

        for row in reader:
            try:
                product = row['product']
                price = float(row['price'])
                quantity = int(row['quantity'])
                total = price * quantity
                print(f"{product} total = {int(total)}")
                logging.info(f"{product} total sales {int(total)}")
            except ValueError:
                logging.error(f"Invalid numeric value in row: {row}")

except FileNotFoundError:
    logging.error("sales_data.csv not found")
    print("Error: sales_data.csv not found")

json

import json
import logging

# Configure logging
logging.basicConfig(filename='task_json.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

try:
    # Step 1: Read JSON file
    with open('data_students.json', 'r') as f:
        students = json.load(f)
    logging.info("File read successful")

    # Step 2: Print all student names
    print("Student Names:")
    for s in students:
        print(s["name"])

    # Step 3: Add a new student
    new_student = {"name": "Arjun", "age": 20, "course": "Data Science", "marks": 78}
    students.append(new_student)
    logging.info("Student added")

    # Step 4: Save back to same file
    with open('data_students.json', 'w') as f:
        json.dump(students, f, indent=4)
    logging.info("File saved successfully")

except FileNotFoundError:
    logging.error("data_students.json file not found")
except json.JSONDecodeError:
    logging.error("Error decoding JSON file")